##WT.M TKT control vs TKT altered
compare = makeContrasts(TktDfWT.M-WT.M, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
WT.M.CxDf2=DEout
sWT.M.CxDf2=DEout[DEout$FDR<.05,]
compare = makeContrasts(TktOEWT.M-WT.M, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
WT.M.CxOE2=DEout
sWT.M.CxOE2=DEout[DEout$FDR<.05,]
##WT.M vs GR.M
compare = makeContrasts(GR.M-WT.M, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
GRxWT.M2=DEout
sGRxWT.M2=DEout[DEout$FDR<.05,]
compare = makeContrasts(TktDfGR.M-TktDfWT.M, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
GRxWT.MDf2=DEout
sGRxWT.MDf2=DEout[DEout$FDR<.05,]
compare = makeContrasts(TktOEGR.M-TktOEWT.M, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
GRxWT.MOE2=DEout
sGRxWT.MOE2=DEout[DEout$FDR<.05,]
MDSdata2 = plotMDS(z, top = 13086, col=as.numeric(factor(gr)))
Comparisons2 = list(row.names(sGR.F.CxDf2), row.names(sGR.F.CxOE2),
row.names(sWT.F.CxDf2), row.names(sWT.F.CxOE2),
row.names(sGRxWT.F2), row.names(sGRxWT.FDf2), row.names(sGRxWT.FOE2),
row.names(sGR.M.CxDf2), row.names(sGR.M.CxOE2),
row.names(sWT.M.CxDf2), row.names(sWT.M.CxOE2),
row.names(sGRxWT.M2), row.names(sGRxWT.MDf2), row.names(sGRxWT.MOE2))
TKT.EdgeR2 = data.frame(GRF.CxDf = GR.F.CxDf2[row.names(cpmdata2),'FDR'],
GRF.CxOE = GR.F.CxOE2[row.names(cpmdata2),'FDR'],
WTF.CxDf = WT.F.CxDf2[row.names(cpmdata2),'FDR'],
WTF.CxOE = WT.F.CxOE2[row.names(cpmdata2),'FDR'],
GRxWT.FC = GRxWT.F2[row.names(cpmdata2),'FDR'],
GRxWT.FDf = GRxWT.FDf2[row.names(cpmdata2),'FDR'],
GRxWT.FOE = GRxWT.FOE2[row.names(cpmdata2),'FDR'],
GRM.CxDf = GR.M.CxDf2[row.names(cpmdata2),'FDR'],
GRM.CxOE = GR.M.CxOE2[row.names(cpmdata2),'FDR'],
WTM.CxDf = WT.M.CxDf2[row.names(cpmdata2),'FDR'],
WTM.CxOE = WT.M.CxOE2[row.names(cpmdata2),'FDR'],
GRxWT.MC = GRxWT.M2[row.names(cpmdata2),'FDR'],
GRxWT.MDf = GRxWT.MDf2[row.names(cpmdata2),'FDR'],
GRxWT.MOE = GRxWT.MOE2[row.names(cpmdata2),'FDR'])
##write.csv(cpmdata2, "/Users/johncsantiago/Documents/GitHub/WhartonLab/TKT_RNAseq/CountTables/TKT_cpmdata.csv")
##write.csv(groups2, "/Users/johncsantiago/Documents/GitHub/WhartonLab/TKT_RNAseq/CountTables/TKT.metadata.csv")
##write.csv(TKT.EdgeR2, "/Users/johncsantiago/Documents/GitHub/WhartonLab/TKT_RNAseq/CountTables/TKT.EdgeR.Table.csv")
write.csv(cpmdata2, "/Users/johncsantiago/Documents/GitHub/WhartonLab/TKT_RNAseq/CountTables/TKT_cpmdata.csv")
write.csv(groups2, "/Users/johncsantiago/Documents/GitHub/WhartonLab/TKT_RNAseq/CountTables/TKT.metadata.csv")
write.csv(TKT.EdgeR2, "/Users/johncsantiago/Documents/GitHub/WhartonLab/TKT_RNAseq/CountTables/TKT.EdgeR.Table.csv")
shiny::runApp('Documents/GitHub/WhartonLab/TKT_RNAseq/Apps/DEG Heatmap')
runApp('Documents/GitHub/WhartonLab/TKT_RNAseq/Apps/DEG Heatmap')
runApp('Documents/GitHub/WhartonLab/TKT_RNAseq/Apps/DEG Heatmap')
git.dir = "https://raw.githubusercontent.com/johncsantiago/WhartonLab/master/TKT_RNAseq/CountTables/"
cpmdata = read.csv(paste0(git.dir,"TKT_cpmdata.csv"),row.names = 1)
groups  = read.csv(paste0(git.dir,"TKT.metadata.csv"),row.names = 1)
TKT.EdgeR = read.csv(paste0(git.dir,"TKT.EdgeR.Table.csv"),row.names = 1)
head(cpmdata)
git.dir = "https://raw.githubusercontent.com/johncsantiago/WhartonLab/master/TKT_RNAseq/CountTables/"
cpmdata = read.csv(paste0(git.dir,"TKT_cpmdata.csv"),row.names = 1)
groups  = read.csv(paste0(git.dir,"TKT.metadata.csv"),row.names = 1)
convert=read.csv("https://raw.githubusercontent.com/DavidRandLab/Santiago-et-al-2021-BMC-Genomics/main/Data%20Files/FBgnConversionTable.csv",row.names=1)
temp=convert[,"Symbol"]
shiny::runApp('Documents/GitHub/Shiny/TKT PCA')
runApp('Documents/GitHub/WhartonLab/TKT_RNAseq/Apps/DEG Heatmap')
runApp('Documents/GitHub/WhartonLab/TKT_RNAseq/Apps/DEG Heatmap')
runApp('Documents/GitHub/WhartonLab/TKT_RNAseq/Apps/DEG Heatmap')
head(TKT.EdgeR)
git.dir = "https://raw.githubusercontent.com/johncsantiago/WhartonLab/master/TKT_RNAseq/CountTables/"
cpmdata = read.csv(paste0(git.dir,"TKT_cpmdata.csv"),row.names = 1)
groups  = read.csv(paste0(git.dir,"TKT.metadata.csv"),row.names = 1)
TKT.EdgeR = read.csv(paste0(git.dir,"TKT.EdgeR.Table.csv"),row.names = 1)
head(TKT.EdgeR)
knitr::opts_chunk$set(echo = TRUE)
library(edgeR)
library(plotly)
library(heatmaply)
##Clean Trait Data and calculate CPMs
countdata=read.csv("/Users/johncsantiago/Documents/GitHub/WhartonLab/TKT_RNAseq/CountTables/TKT.counttable.csv",row.names=1)
groups=read.csv("/Users/johncsantiago/Documents/GitHub/WhartonLab/TKT_RNAseq/CountTables/All.TKT.metadata.csv",row.names=1)
convert=read.csv("https://raw.githubusercontent.com/DavidRandLab/Santiago-et-al-2021-BMC-Genomics/main/Data%20Files/FBgnConversionTable.csv",row.names=1)
##normalize data
countdata=countdata[, row.names(groups)]
x <- countdata
gr <- factor(groups$Group)
y <- DGEList(counts=x,group=gr)
keep <- filterByExpr(y)
y <- y[keep,,keep.lib.sizes=FALSE]
z <- calcNormFactors(y, method = "TMM")
##normalized cpm
cpmdata=cpm(z)
design<-model.matrix(~0 + gr)
colnames(design) = unique(gr)
z = estimateDisp(z, design, robust = T)
fit <- glmQLFit(z, design)
plotQLDisp(fit)
##Will calculate fold-change with the first over the second
##GR.F TKT control vs TKT altered
compare = makeContrasts(TktDfGR.F-GR.F, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
GR.F.CxDf=DEout
sGR.F.CxDf=DEout[DEout$FDR<.05,]
compare = makeContrasts(TktOEGR.F-GR.F, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
GR.F.CxOE=DEout
sGR.F.CxOE=DEout[DEout$FDR<.05,]
##WT.F TKT control vs TKT altered
compare = makeContrasts(TktDfWT.F-WT.F, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
WT.F.CxDf=DEout
sWT.F.CxDf=DEout[DEout$FDR<.05,]
compare = makeContrasts(TktOEWT.F-WT.F, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
WT.F.CxOE=DEout
sWT.F.CxOE=DEout[DEout$FDR<.05,]
##WT.F vs GR.F
compare = makeContrasts(GR.F-WT.F, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
GRxWT.F=DEout
sGRxWT.F=DEout[DEout$FDR<.05,]
compare = makeContrasts(TktDfGR.F-TktDfWT.F, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
GRxWT.FDf=DEout
sGRxWT.FDf=DEout[DEout$FDR<.05,]
compare = makeContrasts(TktOEGR.F-TktOEWT.F, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
GRxWT.FOE=DEout
sGRxWT.FOE=DEout[DEout$FDR<.05,]
##GR.M TKT control vs TKT altered
compare = makeContrasts(TktDfGR.M-GR.M, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
GR.M.CxDf=DEout
sGR.M.CxDf=DEout[DEout$FDR<.05,]
compare = makeContrasts(TktOEGR.M-GR.M, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
GR.M.CxOE=DEout
sGR.M.CxOE=DEout[DEout$FDR<.05,]
##WT.M TKT control vs TKT altered
compare = makeContrasts(TktDfWT.M-WT.M, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
WT.M.CxDf=DEout
sWT.M.CxDf=DEout[DEout$FDR<.05,]
compare = makeContrasts(TktOEWT.M-WT.M, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
WT.M.CxOE=DEout
sWT.M.CxOE=DEout[DEout$FDR<.05,]
##WT.M vs GR.M
compare = makeContrasts(GR.M-WT.M, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
GRxWT.M=DEout
sGRxWT.M=DEout[DEout$FDR<.05,]
compare = makeContrasts(TktDfGR.M-TktDfWT.M, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
GRxWT.MDf=DEout
sGRxWT.MDf=DEout[DEout$FDR<.05,]
compare = makeContrasts(TktOEGR.M-TktOEWT.M, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
GRxWT.MOE=DEout
sGRxWT.MOE=DEout[DEout$FDR<.05,]
TKT.EdgeR = data.frame(GRF.CxDf = GR.F.CxDf[row.names(cpmdata),'FDR'],
GRF.CxOE = GR.F.CxOE[row.names(cpmdata),'FDR'],
WTF.CxDf = WT.F.CxDf[row.names(cpmdata),'FDR'],
WTF.CxOE = WT.F.CxOE[row.names(cpmdata),'FDR'],
GRxWT.FC = GRxWT.F[row.names(cpmdata),'FDR'],
GRxWT.FDf = GRxWT.FDf[row.names(cpmdata),'FDR'],
GRxWT.FOE = GRxWT.FOE[row.names(cpmdata),'FDR'],
GRM.CxDf = GR.M.CxDf[row.names(cpmdata),'FDR'],
GRM.CxOE = GR.M.CxOE[row.names(cpmdata),'FDR'],
WTM.CxDf = WT.M.CxDf[row.names(cpmdata),'FDR'],
WTM.CxOE = WT.M.CxOE[row.names(cpmdata),'FDR'],
GRxWT.MC = GRxWT.M[row.names(cpmdata),'FDR'],
GRxWT.MDf = GRxWT.MDf[row.names(cpmdata),'FDR'],
GRxWT.MOE = GRxWT.MOE[row.names(cpmdata),'FDR'])
row.names(TKT.EdgeR) = row.names(cpmdata)
##write.csv(TKT.EdgeR, "/Users/johncsantiago/Documents/GitHub/WhartonLab/TKT_RNAseq/CountTables/TKT.EdgeR.Table.csv")
Female = c(nrow(sGR.F.CxDf), nrow(sGR.F.CxOE),
nrow(sWT.F.CxDf), nrow(sWT.F.CxOE),
nrow(sGRxWT.F), nrow(sGRxWT.FDf), nrow(sGRxWT.FOE))
Male = c(nrow(sGR.M.CxDf), nrow(sGR.M.CxOE),
nrow(sWT.M.CxDf), nrow(sWT.M.CxOE),
nrow(sGRxWT.M), nrow(sGRxWT.MDf), nrow(sGRxWT.MOE))
MDSdata = plotMDS(z, top = 13582, col=as.numeric(factor(gr)))
temp=convert[,"Symbol"]
temp2=setdiff(row.names(countdata),convert[,2])
names(temp)=convert[,2]
names(temp2)=temp2
convert=c(temp,temp2)
Comparisons = list(row.names(sGR.F.CxDf), row.names(sGR.F.CxOE),
row.names(sWT.F.CxDf), row.names(sWT.F.CxOE),
row.names(sGRxWT.F), row.names(sGRxWT.FDf), row.names(sGRxWT.FOE),
row.names(sGR.M.CxDf), row.names(sGR.M.CxOE),
row.names(sWT.M.CxDf), row.names(sWT.M.CxOE),
row.names(sGRxWT.M), row.names(sGRxWT.MDf), row.names(sGRxWT.MOE))
GroupsToDEGs = matrix("", nrow = 28, ncol = 3)
GroupsToDEGs[,1] = c("GR.F", "TktDfGR.F",
"GR.F", "TktOEGR.F",
"WT.F", "TktDfWT.F",
"WT.F", "TktOEWT.F",
"GR.F", "WT.F",
"TktDfGR.F", "TktDfWT.F",
"TktOEGR.F", "TktOEWT.F",
"GR.M", "TktDfGR.M",
"GR.M", "TktOEGR.M",
"WT.M", "TktDfWT.M",
"WT.M", "TktOEWT.M",
"GR.M", "WT.M",
"TktDfGR.M", "TktDfWT.M",
"TktOEGR.M", "TktOEWT.M")
GroupsToDEGs[,2] = c("TktDfGR.F", "GR.F",
"TktOEGR.F", "GR.F",
"TktDfWT.F", "WT.F",
"TktOEWT.F", "WT.F",
"WT.F", "GR.F",
"TktDfWT.F", "TktDfGR.F",
"TktOEWT.F", "TktOEGR.F",
"TktDfGR.M", "GR.M",
"TktOEGR.M", "GR.M",
"TktDfWT.M", "WT.M",
"TktOEWT.M", "WT.M",
"WT.M", "GR.M",
"TktDfWT.M", "TktDfGR.M",
"TktOEWT.M", "TktOEGR.M")
GroupsToDEGs[,3] = c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,
8,8,9,9,10,10,11,11,12,12,13,13,14,14)
###EdgeR with TEs and outlier libraries removed
groups2 = groups[setdiff(row.names(groups), c("GR.F3", "WT.F3", "TktDfWT.F3")),]
countdata2 = countdata[, row.names(groups2)]
countdata2 = countdata2[-(grep("ti",row.names(countdata2))),]
countdata2 = countdata2[-(grep("trans",row.names(countdata2))),]
x <- countdata2
gr <- factor(groups2$Group)
y <- DGEList(counts=x,group=gr)
keep <- filterByExpr(y)
y <- y[keep,,keep.lib.sizes=FALSE]
z <- calcNormFactors(y, method = "TMM")
##normalized cpm
cpmdata2=cpm(z)
design<-model.matrix(~0 + gr)
colnames(design) = unique(gr)
z = estimateDisp(z, design, robust = T)
fit <- glmQLFit(z, design)
plotQLDisp(fit)
##Will calculate fold-change with the first over the second
##GR.F TKT control vs TKT altered
compare = makeContrasts(TktDfGR.F-GR.F, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
GR.F.CxDf2=DEout
sGR.F.CxDf2=DEout[DEout$FDR<.05,]
compare = makeContrasts(TktOEGR.F-GR.F, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
GR.F.CxOE2=DEout
sGR.F.CxOE2=DEout[DEout$FDR<.05,]
##WT.F TKT control vs TKT altered
compare = makeContrasts(TktDfWT.F-WT.F, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
WT.F.CxDf2=DEout
sWT.F.CxDf2=DEout[DEout$FDR<.05,]
compare = makeContrasts(TktOEWT.F-WT.F, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
WT.F.CxOE2=DEout
sWT.F.CxOE2=DEout[DEout$FDR<.05,]
##WT.F vs GR.F
compare = makeContrasts(GR.F-WT.F, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
GRxWT.F2=DEout
sGRxWT.F2=DEout[DEout$FDR<.05,]
compare = makeContrasts(TktDfGR.F-TktDfWT.F, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
GRxWT.FDf2=DEout
sGRxWT.FDf2=DEout[DEout$FDR<.05,]
compare = makeContrasts(TktOEGR.F-TktOEWT.F, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
GRxWT.FOE2=DEout
sGRxWT.FOE2=DEout[DEout$FDR<.05,]
##GR.M TKT control vs TKT altered
compare = makeContrasts(TktDfGR.M-GR.M, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
GR.M.CxDf2=DEout
sGR.M.CxDf2=DEout[DEout$FDR<.05,]
compare = makeContrasts(TktOEGR.M-GR.M, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
GR.M.CxOE2=DEout
sGR.M.CxOE2=DEout[DEout$FDR<.05,]
##WT.M TKT control vs TKT altered
compare = makeContrasts(TktDfWT.M-WT.M, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
WT.M.CxDf2=DEout
sWT.M.CxDf2=DEout[DEout$FDR<.05,]
compare = makeContrasts(TktOEWT.M-WT.M, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
WT.M.CxOE2=DEout
sWT.M.CxOE2=DEout[DEout$FDR<.05,]
##WT.M vs GR.M
compare = makeContrasts(GR.M-WT.M, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
GRxWT.M2=DEout
sGRxWT.M2=DEout[DEout$FDR<.05,]
compare = makeContrasts(TktDfGR.M-TktDfWT.M, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
GRxWT.MDf2=DEout
sGRxWT.MDf2=DEout[DEout$FDR<.05,]
compare = makeContrasts(TktOEGR.M-TktOEWT.M, levels=design)
lrt = glmQLFTest(fit,contrast=as.vector(compare))
G_X_E<-topTags(lrt,adjust.method="BH",n = nrow(z$counts), sort.by="PValue")
DEout=G_X_E$table
GRxWT.MOE2=DEout
sGRxWT.MOE2=DEout[DEout$FDR<.05,]
MDSdata2 = plotMDS(z, top = 13086, col=as.numeric(factor(gr)))
Comparisons2 = list(row.names(sGR.F.CxDf2), row.names(sGR.F.CxOE2),
row.names(sWT.F.CxDf2), row.names(sWT.F.CxOE2),
row.names(sGRxWT.F2), row.names(sGRxWT.FDf2), row.names(sGRxWT.FOE2),
row.names(sGR.M.CxDf2), row.names(sGR.M.CxOE2),
row.names(sWT.M.CxDf2), row.names(sWT.M.CxOE2),
row.names(sGRxWT.M2), row.names(sGRxWT.MDf2), row.names(sGRxWT.MOE2))
TKT.EdgeR2 = data.frame(GRF.CxDf = GR.F.CxDf2[row.names(cpmdata2),'FDR'],
GRF.CxOE = GR.F.CxOE2[row.names(cpmdata2),'FDR'],
WTF.CxDf = WT.F.CxDf2[row.names(cpmdata2),'FDR'],
WTF.CxOE = WT.F.CxOE2[row.names(cpmdata2),'FDR'],
GRxWT.FC = GRxWT.F2[row.names(cpmdata2),'FDR'],
GRxWT.FDf = GRxWT.FDf2[row.names(cpmdata2),'FDR'],
GRxWT.FOE = GRxWT.FOE2[row.names(cpmdata2),'FDR'],
GRM.CxDf = GR.M.CxDf2[row.names(cpmdata2),'FDR'],
GRM.CxOE = GR.M.CxOE2[row.names(cpmdata2),'FDR'],
WTM.CxDf = WT.M.CxDf2[row.names(cpmdata2),'FDR'],
WTM.CxOE = WT.M.CxOE2[row.names(cpmdata2),'FDR'],
GRxWT.MC = GRxWT.M2[row.names(cpmdata2),'FDR'],
GRxWT.MDf = GRxWT.MDf2[row.names(cpmdata2),'FDR'],
GRxWT.MOE = GRxWT.MOE2[row.names(cpmdata2),'FDR'])
row.names(TKT.EdgeR2) = row.names(cpmdata2)
##write.csv(cpmdata2, "/Users/johncsantiago/Documents/GitHub/WhartonLab/TKT_RNAseq/CountTables/TKT_cpmdata.csv")
##write.csv(groups2, "/Users/johncsantiago/Documents/GitHub/WhartonLab/TKT_RNAseq/CountTables/TKT.metadata.csv")
##write.csv(TKT.EdgeR2, "/Users/johncsantiago/Documents/GitHub/WhartonLab/TKT_RNAseq/CountTables/TKT.EdgeR.Table.csv")
groups
groups2
write.csv(TKT.EdgeR2, "/Users/johncsantiago/Documents/GitHub/WhartonLab/TKT_RNAseq/CountTables/TKT.EdgeR.Table.csv")
git.dir = "https://raw.githubusercontent.com/johncsantiago/WhartonLab/master/TKT_RNAseq/CountTables/"
cpmdata = read.csv(paste0(git.dir,"TKT_cpmdata.csv"),row.names = 1)
groups  = read.csv(paste0(git.dir,"TKT.metadata.csv"),row.names = 1)
TKT.EdgeR = read.csv(paste0(git.dir,"TKT.EdgeR.Table.csv"),row.names = 1)
head(TKT.EdgeR)
runApp('Documents/GitHub/WhartonLab/TKT_RNAseq/Apps/DEG Heatmap')
grep("IDGF", convert)
grep("Idgf", convert)
convert[grep("Idgf", convert)]
TKT.EdgeR["FBgn0013763",]
runApp('Documents/GitHub/WhartonLab/TKT_RNAseq/Apps/DEG Heatmap')
runApp('Documents/GitHub/WhartonLab/TKT_RNAseq/Apps/DEG Heatmap')
head(TKT.EdgeR)
colnames(TKT.EdgeR)
head(convert)
convert=read.csv("https://raw.githubusercontent.com/DavidRandLab/Santiago-et-al-2021-BMC-Genomics/main/Data%20Files/FBgnConversionTable.csv",row.names=1)
head(convert)
temp=convert[,c("updated.FBgn","Symbol")]
head(temp)
temp2=setdiff(row.names(cpmdata),row.names(convert))
temp2=setdiff(row.names(cpmdata),row.names(convert))
length(temp2)
temp2=matrix(rep(temp2,3), ncol=3)
head(temp2)
temp2=matrix(rep(temp2,2), ncol=2)
row.names(temp2)=temp2[,1]
colnames(temp2)=colnames(temp)
head(temp2)
head(temp)
convert = rbind(temp,temp2)
colnames(convert) = c("FBgn", "Symbol")
groups
groups.use = groups[,rep(1,8)]
groups.use
groups.use = matrix(0,nrow = nrow(groups), ncol = 8)
groups.use
row.names(groups.use) = row.names(groups)
colnames(groups.use) = c("GR", "WT", "M", "F", "C", "DF", "OE")
groups.use = matrix(0,nrow = nrow(groups), ncol = 7)
row.names(groups.use) = row.names(groups)
colnames(groups.use) = c("GR", "WT", "M", "F", "C", "DF", "OE")
groups.use
groups.use = matrix(0,nrow = nrow(groups), ncol = 7)
row.names(groups.use) = row.names(groups)
colnames(groups.use) = c("GR", "WT", "M", "F", "C", "DF", "OE")
groups.use$GR[groups$Genotype == "GR"] =1
groups.use = matrix(0,nrow = nrow(groups), ncol = 7)
row.names(groups.use) = row.names(groups)
colnames(groups.use) = c("GR", "WT", "M", "F", "C", "DF", "OE")
groups.use[groups$Genotype == "GR",      "GR"] =1
groups.use[groups$Genotype == "WT",      "WT"] =1
groups.use[groups$Sex      == "M",       "M"]  =1
groups.use[groups$Sex      == "F",       "F"]  =1
groups.use[groups$TKT      == "Control", "C"]  =1
groups.use[groups$TKT      == "DF",      "DF"] =1
groups.use[groups$TKT      == "OE",      "OE"] =1
groups.use
groups
temp = data.frame(gene = cpmdata[3,], group = groups$Group)
temp
cpmdata[3,]
groups$Group
temp = data.frame(gene = cpmdata[3,], group = groups$Group)
temp = data.frame(gene = cpmdata[3,], group = groups[,'Group'])
gene = cpmdata[,3]
cat=groups$Group
gene
gene = cpmdata[3,]
gene
groups
cat
length(cat)
length(gene)
data.frame(gene, cat)
gene
temp = data.frame(gene = t(cpmdata[,3]), group = groups[,'Group'])
temp
t(cpmdata[,3])
dim(t(cpmdata))
t(cpmdata)[,3]
temp = data.frame(gene = t(cpmdata)[,3], group = groups[,'Group'])
temp
plot_ly(data = temp, y = ~gene, x = ~group, type = 'box')
runApp('Documents/GitHub/WhartonLab/TKT_RNAseq/Apps/TKT Specific Gene Boxplot')
git.dir = "https://raw.githubusercontent.com/johncsantiago/WhartonLab/master/TKT_RNAseq/CountTables/"
cpmdata = read.csv(paste0(git.dir,"TKT_cpmdata.csv"),row.names = 1)
groups  = read.csv(paste0(git.dir,"TKT.metadata.csv"),row.names = 1)
TKT.EdgeR = read.csv(paste0(git.dir,"TKT.EdgeR.Table.csv"),row.names = 1)
convert=read.csv("https://raw.githubusercontent.com/DavidRandLab/Santiago-et-al-2021-BMC-Genomics/main/Data%20Files/FBgnConversionTable.csv",row.names=1)
groups.use = matrix(0,nrow = nrow(groups), ncol = 7)
row.names(groups.use) = row.names(groups)
colnames(groups.use) = c("GR", "WT", "M", "F", "C", "DF", "OE")
groups.use[groups$Genotype != "GR",      "GR"] = 1
groups.use[groups$Genotype != "WT",      "WT"] = 1
groups.use[groups$Sex      != "M",       "M"]  = 1
groups.use[groups$Sex      != "F",       "F"]  = 1
groups.use[groups$TKT      != "Control", "C"]  = 1
groups.use[groups$TKT      != "DF",      "DF"] = 1
groups.use[groups$TKT      != "OE",      "OE"] = 1
temp                   = convert[,c("updated.FBgn","Symbol")]
temp2                  = setdiff(row.names(cpmdata),row.names(convert))
temp2                  = matrix(rep(temp2,2), ncol=2)
row.names(temp2)       = temp2[,1]
colnames(temp2)        = colnames(temp)
FBgn2Symbol            = rbind(temp,temp2)
colnames(FBgn2Symbol)  = c("FBgn", "Symbol")
Symbol2FBgn            = FBgn2Symbol
row.names(Symbol2FBgn) = Symbol2FBgn[,"Symbol"]
runApp('Documents/GitHub/WhartonLab/TKT_RNAseq/Apps/TKT Specific Gene Boxplot')
runApp('Documents/GitHub/WhartonLab/TKT_RNAseq/Apps/TKT Specific Gene Boxplot')
groups
runApp('Documents/GitHub/WhartonLab/TKT_RNAseq/Apps/TKT Specific Gene Boxplot')
runApp('Documents/GitHub/WhartonLab/TKT_RNAseq/Apps/TKT Specific Gene Boxplot')
runApp('Documents/GitHub/WhartonLab/TKT_RNAseq/Apps/TKT Specific Gene Boxplot')

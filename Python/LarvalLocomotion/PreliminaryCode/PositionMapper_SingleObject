
import cv2
import numpy as np

video_path = "./Converted/LL_A4Vf_a_2024_03_16.mp4"
cap = cv2.VideoCapture(video_path)




# Read first frame
ret, first_frame = cap.read()
if not ret:
    print("Failed to load video")
    cap.release()
    exit()

background = first_frame.copy()

# Select ROI
bbox = cv2.selectROI("Select Object", first_frame, fromCenter=False, showCrosshair=True)
cv2.destroyWindow("Select Object")

# Tracker setup
tracker = cv2.TrackerCSRT_create()
tracker.init(first_frame, bbox)

# Background subtractor for object isolation
fgbg = cv2.createBackgroundSubtractorMOG2(history=500, varThreshold=50, detectShadows=False)

frame_count = 0
object_snapshots = []
positions = []

while True:
    ret, frame = cap.read()
    if not ret:
        break

    frame_count += 1
    success, bbox = tracker.update(frame)
    if not success:
        continue

    x, y, w, h = [int(v) for v in bbox]
    center_x = x + w // 2
    center_y = y + h // 2
    positions.append((center_x, center_y))

    # Every 100 frames, isolate the object
    if frame_count % 250 == 0:
        obj_patch = frame[y:y+h, x:x+w].copy()

        # Get object mask
        mask_full = fgbg.apply(frame)
        obj_mask = mask_full[y:y+h, x:x+w]
        _, obj_mask = cv2.threshold(obj_mask, 200, 255, cv2.THRESH_BINARY)
        obj_mask = cv2.medianBlur(obj_mask, 5)

        # Create border highlight
        #contours, _ = cv2.findContours(obj_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        #cv2.drawContours(obj_patch, contours, -1, (0, 255, 255), 2)

        object_snapshots.append((obj_patch, obj_mask, x, y))

cap.release()

# --- Compose final image on top of the first frame ---
composite = background.copy()

# Draw dots for every frame
#for cx, cy in positions:
#    cv2.circle(composite, (cx, cy), 1, (255, 255, 255), -1)  # small white dot

# Draw red line for the trajectory
#for i in range(1, len(positions)):
#    pt1 = positions[i - 1]
#    pt2 = positions[i]
#    cv2.line(composite, pt1, pt2, (0, 0, 255), 1)  # red line, 1 pixel thick


# Overlay object snapshots
for patch, mask, x, y in object_snapshots:
    h, w = patch.shape[:2]
    roi = composite[y:y+h, x:x+w]

    # Invert mask
    mask_inv = cv2.bitwise_not(mask)
    mask_inv_3ch = cv2.merge([mask_inv]*3)

    bg_part = cv2.bitwise_and(roi, mask_inv_3ch)
    fg_part = cv2.bitwise_and(patch, cv2.merge([mask]*3))
    blended = cv2.add(bg_part, fg_part)

    composite[y:y+h, x:x+w] = blended

# Display and save
cv2.imshow("Trajectory + Object Snapshots", composite)
cv2.imwrite("trajectory_with_snapshots.png", composite)
cv2.waitKey(0)
cv2.destroyAllWindows()

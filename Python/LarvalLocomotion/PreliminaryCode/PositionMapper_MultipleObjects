
import cv2
import numpy as np

video_path = "./Converted/LL_CRf_a_2024_03_16.mp4"
cap = cv2.VideoCapture(video_path)




# Read first frame
ret, first_frame = cap.read()
if not ret:
    print("Failed to load video")
    cap.release()
    exit()

background = first_frame.copy()

# Select ROI
bboxes = cv2.selectROIs("Select Objects", first_frame, fromCenter=False, showCrosshair=True)
cv2.destroyWindow("Select Objects")


# Tracker setup
trackers = []
for bbox in bboxes:
    tracker = cv2.TrackerCSRT_create()
    tracker.init(first_frame, tuple(bbox))
    trackers.append(tracker)


# Background subtractor for object isolation
fgbg = cv2.createBackgroundSubtractorMOG2(history=500, varThreshold=50, detectShadows=False)

frame_count = 0
object_positions = [[] for _ in trackers]
object_snapshots = [[] for _ in trackers]
colors = [(255, 0, 0), (0, 255, 0), (0, 0, 255),  # add more as needed
          (255, 255, 0), (255, 0, 255), (0, 255, 255)]


while True:
    ret, frame = cap.read()
    if not ret:
        break
    frame_count += 1

    for i, tracker in enumerate(trackers):
        success, bbox = tracker.update(frame)
        if not success:
            continue
        x, y, w, h = [int(v) for v in bbox]
        cx, cy = x + w // 2, y + h // 2
        object_positions[i].append((cx, cy))

        if frame_count % 250 == 0:
            patch = frame[y:y+h, x:x+w].copy()
            mask_full = fgbg.apply(frame)
            obj_mask = mask_full[y:y+h, x:x+w]
            _, obj_mask = cv2.threshold(obj_mask, 200, 255, cv2.THRESH_BINARY)
            obj_mask = cv2.medianBlur(obj_mask, 5)
            #contours, _ = cv2.findContours(obj_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            #cv2.drawContours(patch, contours, -1, (0, 255, 255), 2)
            object_snapshots[i].append((patch, obj_mask, x, y))

cap.release()

import csv

with open("object_trajectories.csv", "w", newline="") as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(["frame", "object_id", "x", "y"])

    # Assume all objects were tracked over the same number of frames
    for obj_id, positions in enumerate(object_positions):
        for frame_idx, (x, y) in enumerate(positions):
            writer.writerow([frame_idx + 1, obj_id, x, y])


# --- Compose final image on top of the first frame ---
composite = background.copy()

# Draw dots for every frame
#for cx, cy in positions:
#    cv2.circle(composite, (cx, cy), 1, (255, 255, 255), -1)  # small white dot

# Draw red line for the trajectory
#for i in range(1, len(positions)):
#    pt1 = positions[i - 1]
#    pt2 = positions[i]
#    cv2.line(composite, pt1, pt2, (0, 0, 255), 1)  # red line, 1 pixel thick


# Draw trajectories
#for i, pos_list in enumerate(object_positions):
#    for j in range(1, len(pos_list)):
#        pt1 = pos_list[j - 1]
#        pt2 = pos_list[j]
#        cv2.line(composite, pt1, pt2, colors[i % len(colors)], 1)

# Overlay snapshots
for i, snapshots in enumerate(object_snapshots):
    for patch, mask, x, y in snapshots:
        h, w = patch.shape[:2]
        roi = composite[y:y+h, x:x+w]
        mask_inv = cv2.bitwise_not(mask)
        mask_inv_3ch = cv2.merge([mask_inv]*3)
        bg_part = cv2.bitwise_and(roi, mask_inv_3ch)
        fg_part = cv2.bitwise_and(patch, cv2.merge([mask]*3))
        blended = cv2.add(bg_part, fg_part)
        composite[y:y+h, x:x+w] = blended


# Display and save
cv2.imshow("Trajectory + Object Snapshots", composite)
cv2.imwrite("trajectory_with_snapshots.png", composite)
cv2.waitKey(0)
cv2.destroyAllWindows()
